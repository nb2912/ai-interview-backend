{
    "technical": "Based on the following resume details:\n\n{Summary}\n{Skills}\n{Experience}\n\nGenerate {num_questions} technical interview questions specifically related to Python programming, including but not limited to: core language features, data structures, algorithms, object-oriented programming, and the Python standard library.",
    "frameworks": "Considering the candidate's experience:\n\n{Summary}\n{Skills}\n\nIf they mention any Python frameworks or libraries (e.g., Django, Flask, FastAPI), generate {num_questions} interview questions that assess their understanding and practical application of those specific technologies. If no frameworks are mentioned, ask general questions about web development or backend architecture in Python.",
    "data_science": "Given their background, especially if they mention data science or machine learning skills:\n\n{Summary}\n{Skills}\n\nFormulate {num_questions} interview questions focused on relevant Python libraries (e.g., NumPy, Pandas, Scikit-learn, TensorFlow, PyTorch) and their application in data analysis, manipulation, and model building.",
    "performance": "Regarding their experience with Python projects:\n\n{Summary}\n{Skills}\n{Experience}\n\nAsk {num_questions} questions about Python performance optimization techniques, such as profiling, efficient data handling, and concurrency/parallelism (if applicable).",
    "best_practices": "Concerning their Python development experience:\n\n{Summary}\n{Skills}\n{Experience}\n\nGenerate {num_questions} questions about Python best practices, including code style (PEP 8), testing, error handling, and project structure.",
    "behavioral": "Considering their experience working with Python teams or on Python-based projects:\n\n{Summary}\n{Experience}\n\nGenerate {num_questions} behavioral interview questions that explore their collaboration, problem-solving approaches in Python-related challenges, and their experience with code reviews."
  }